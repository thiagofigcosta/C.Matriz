funções:
	soma
	multiplicação de escalar
	multiplicação
	traço
	transposta
	inversa 2x2
	determinante 3x3
	determinante 2x2
	erl(precisa de offset)
	inversa nxn
	solucao de sistema por matriz inversa
	adjunta	
	determinante nxn
	cramer(80%)
mods:
	linux suport
__________________________________________
#include <iostream>
#include <locale.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <string>

#ifdef __linux__
    #define stricmp strcasecmp
    #define strnicmp strncasecmp
#elif _WIN32
    #include <conio.h>
#endif

#define mtzSize 10
#define strSize 100
#define offset 0.001
using namespace std;

double matrizaux [mtzSize][mtzSize];
int ma_n=-1; //linhas
int ma_m=-1; //colunas


double matriz1 [mtzSize][mtzSize];
int m1_n=-1; //linhas
int m1_m=-1; //colunas

double matriz2 [mtzSize][mtzSize];
int m2_n=-1; //linhas
int m2_m=-1; //colunas


char stringmatriz[strSize];
char command[strSize];
int lastmtzidx=0;
bool tudopiranha=1;

int main()
{
    void get_matriz();
    void resetvar();
    cout<<"C.Matriz"<<endl;
    while(tudopiranha){
        cout<<"digite um comando (ex: help):"<<endl;
        resetvar();
        get_matriz();
        cout<<endl;
        cout<<endl;
    }
    return 0;
}

void resetvar(){
    memset(stringmatriz,0,strSize);
    lastmtzidx=0;
    ma_n=-1;
    ma_m=-1;
    m1_n=-1;
    m1_m=-1;
    m2_n=-1;
    m2_m=-1;

    for(int i=0;i<mtzSize;i++)
        for(int j=0;j<mtzSize;j++){
            matrizaux[i][j]=0;
            matriz1[i][j]=0;
            matriz2[i][j]=0;
        }
}

//1 0 0 1
//0 1 0 2
//0 0 1 3

void get_matriz(){
    // comando a11 a12|a21 a22|
    void commandProcedure();
    memset(command,0,strSize);
    cin.getline(stringmatriz,strSize);             strcpy(stringmatriz,"cramer 1 0 0|0 1 0|0 0 1| & 2|3|4|");
    for (int i=0;i<strlen(stringmatriz);i++)
        if (stringmatriz[i]!=' ')
            command[i]=stringmatriz[i];
        else
            i=strlen(stringmatriz);
    commandProcedure();
}

void commandProcedure(){
    void strtomatriz(int nmatriz);
    bool isErl();
    void toErl();
    void toInvnn();
    void mult();
    double cofator(int a,int b,double matrizZ[mtzSize][mtzSize],int mz_n,int mz_m);
    double detadj(double matrizZ[mtzSize][mtzSize],int mz_n,int mz_m);

    if (!stricmp(command,"transposta")){ //compara ignorando se  é maiusculo ou nao
        strtomatriz(1);

        for(int i=0;i<m1_n;i++)
            for(int j=0;j<m1_m;j++)
                matrizaux[i][j]=matriz1[i][j];
        for(int i=0;i<m1_m;i++)
            for(int j=0;j<m1_n;j++)
                    matriz1[i][j]=matrizaux[j][i];
        for(int i=0;i<m1_m;i++){
            cout<<endl;
            for(int j=0;j<m1_n;j++)
                cout<<matriz1[i][j]<<" ";
        }
    }else if(!stricmp(command,"multiE")){ //multiplica por escalar
        double escalar;
        char aux[strSize];
        int aux1=-1;
        strtomatriz(1);
        for(int i=lastmtzidx;i<strlen(stringmatriz);i++)
            if(stringmatriz[i]!=' '&&stringmatriz[i]!='|'){
                aux1++;
                aux[aux1]=stringmatriz[i];
            }

        escalar=atof(aux);
        for(int i=0;i<m1_n;i++){cout<<endl;
            for(int j=0;j<m1_m;j++){
                cout<<"("<<matriz1[i][j]<<")*("<<escalar<<") ";
                matriz1[i][j]*=escalar;
            }
        }
        cout<<endl<<endl<<"Resultado: ";
        for(int i=0;i<m1_n;i++){
            cout<<endl;
            for(int j=0;j<m1_m;j++)
                cout<<matriz1[i][j]<<" ";
        }
    }else if(!stricmp(command,"soma")){//soma de matrizes
        strtomatriz(2);
        if(m1_n==m2_n&&m1_m==m2_m){
            for(int i=0;i<m1_n;i++){cout<<endl;
                for(int j=0;j<m1_m;j++){
                    cout<<"("<<matriz1[i][j]<<")+("<<matriz2[i][j]<<") ";
                    matriz1[i][j]+=matriz2[i][j];
                }
            }
            cout<<endl<<endl<<"Resultado: ";
            for(int i=0;i<m1_n;i++){
                cout<<endl;
                for(int j=0;j<m1_m;j++)
                    cout<<matriz1[i][j]<<" ";
            }
        }else cout<<endl<<"as matrizes devem ter o mesmo tamanho para realizar a soma"<<endl;
    } else if(!stricmp(command,"multi")){
        strtomatriz(2);
        mult();
            cout<<endl<<endl<<"Resultado: ";
            for(int i=0;i<m1_n;i++){
                    cout<<endl;
                    for(int j=0;j<m2_m;j++)
                        cout<<matriz1[j][i]<<" ";
                }
    } else if(!stricmp(command,"tr")||!stricmp(command,"traco")){
        strtomatriz(1);
        double traco;
        for(int i=0;i<m1_n;i++)
                for(int j=0;j<m1_m;j++)
                    if(i==j)
                        traco+=matriz1[i][j];
        cout<<traco;
    } else if(!stricmp(command,"det22")){
        strtomatriz(1);
        double det;
        double aux1=0,aux2=0;
        if(m1_n==2&&m1_m==2){
            aux1=matriz1[0][0]*matriz1[1][1];
            aux2=matriz1[0][1]*matriz1[1][0];
            cout<<"det=a*c-b*d  "<<aux1<<"-("<<aux2<<")";
            det=aux1-aux2;
            cout<<endl<<endl<<"Resultado: "<<det;
        }else cout<<endl<<"a matriz deve ser 2x2"<<endl;
    }else if(!stricmp(command,"det33")){
        strtomatriz(1);
        double det;
        double aux1=0,aux2=0;
        if(m1_n==3&&m1_m==3){
            aux1=(matriz1[0][0]*matriz1[1][1]*matriz1[2][2])+(matriz1[0][1]*matriz1[1][2]*matriz1[2][0])+(matriz1[0][2]*matriz1[1][0]*matriz1[2][1]);
            aux2=(matriz1[0][1]*matriz1[1][0]*matriz1[2][2])+(matriz1[0][0]*matriz1[1][2]*matriz1[2][1])+(matriz1[0][2]*matriz1[1][1]*matriz1[2][0]);
            cout<<"a b c|a b"<<endl<<"d e f|d e"<<endl<<"g h i|g h"<<endl;
            cout<<"det=(a*e*i)+(b*f*g)+(c*d*h)-(b*d*i)-(a*f*h)-(c*e*g)  "<<aux1<<"-("<<aux2<<")";
            det=aux1-aux2;
            cout<<endl<<endl<<"Resultado: "<<det;
        }else cout<<endl<<"a matriz deve ser 3x3"<<endl;
    }else if(!stricmp(command,"inv22")){
        strtomatriz(1);
        double det;
        double aux1=0,aux2=0;
        if(m1_n==2&&m1_m==2){
            aux1=matriz1[0][0]*matriz1[1][1];
            aux2=matriz1[0][1]*matriz1[1][0];
            cout<<"inv=1/(det)*  d -b"<<endl<<"             -c  a"<<endl;
            det=aux1-aux2;
            cout<<"1/"<<det<<"*(d-b|-ca|)";
            for(int i=0;i<m1_n;i++)
                for(int j=0;j<m1_m;j++)
                    matriz1[i][j]*=1/det;
            aux1=matriz1[0][1];
            aux2=matriz1[1][0];
            if(aux1!=0)aux1*=-1;
            if(aux2!=0)aux2*=-1;
            cout<<endl<<endl<<"Resultado: \n"<<matriz1[1][1]<<" "<<aux1<<"\n"<<aux2<<" "<<matriz1[0][0];
        }else cout<<endl<<"a matriz deve ser 2x2"<<endl;
    }else if(!stricmp(command,"erl")){
        strtomatriz(1);
        toErl();
        cout<<endl<<endl<<"Resultado: ";
        for(int i=0;i<m1_n;i++){
            cout<<endl;
            for(int j=0;j<m1_m;j++)
                cout<<matriz1[i][j]<<" ";
        }

    }else if(!stricmp(command,"invnn")){
        strtomatriz(1);
        toInvnn();

        cout<<endl<<endl<<"Resultado: ";
            for(int i=0;i<m1_n;i++){
                cout<<endl;
                for(int j=0;j<m1_m*2;j++)
                    cout<<matriz1[i][j]<<" ";
            }
    }else if(!stricmp(command,"ssminv")){ //error
        strtomatriz(2);
        toInvnn();
        for(int i=0;i<m1_n;i++)
            for(int j=0;j<m1_m;j++)
                matriz1[i][j]=matriz1[i][j+m1_m];
        mult();
        cout<<endl<<endl<<"Resultado: ";
        for(int i=0;i<m1_n;i++){
            cout<<endl;
            for(int j=0;j<m2_m;j++)
                cout<<matriz1[j][i]<<" ";
        }
    }else if(!stricmp(command,"adj")){
        strtomatriz(1);
        for(int i=0;i<m1_n;i++)
            for(int j=0;j<m1_m;j++)
                matrizaux[i][j]=matriz1[i][j];
        ma_n=m1_n;ma_m=m1_m;
        for(int i=0;i<m1_n;i++)
            for(int j=0;j<m1_m;j++)
                matriz1[i][j]=cofator(i,j,matrizaux,ma_n,ma_m);
        for(int i=0;i<m1_n;i++)
            for(int j=0;j<m1_m;j++)
                matrizaux[i][j]=matriz1[i][j];
        for(int i=0;i<m1_m;i++)
            for(int j=0;j<m1_n;j++)
                    matriz1[i][j]=matrizaux[j][i];
        for(int i=0;i<m1_m;i++){
            cout<<endl;
            for(int j=0;j<m1_n;j++)
                cout<<matriz1[i][j]<<" ";
        }
    }else if(!stricmp(command,"detnn")){
        strtomatriz(1);
        cout<<endl<<endl<<"Resultado: "<<detadj(matriz1,m1_n,m1_m);
    }else if(!stricmp(command,"invadj")){
        double escalar;
        int aux1=-1;
        strtomatriz(1);
        escalar=1/detadj(matriz1,m1_n,m1_m);

        for(int i=0;i<m1_n;i++)
            for(int j=0;j<m1_m;j++)
                matrizaux[i][j]=matriz1[i][j];
        ma_n=m1_n;ma_m=m1_m;

        for(int i=0;i<m1_n;i++)
            for(int j=0;j<m1_m;j++)
                matriz1[i][j]=cofator(i,j,matrizaux,ma_n,ma_m);
        for(int i=0;i<m1_n;i++)
            for(int j=0;j<m1_m;j++)
                matrizaux[i][j]=matriz1[i][j];
        for(int i=0;i<m1_m;i++)
            for(int j=0;j<m1_n;j++)
                    matriz1[i][j]=matrizaux[j][i];

        for(int i=0;i<m1_n;i++){cout<<endl;
            for(int j=0;j<m1_m;j++){
                cout<<"("<<matriz1[i][j]<<")*("<<escalar<<") ";
                matriz1[i][j]*=escalar;
            }
        }
        cout<<endl<<endl<<"Resultado: ";
        for(int i=0;i<m1_n;i++){
            cout<<endl;
            for(int j=0;j<m1_m;j++)
                cout<<matriz1[i][j]<<" ";
        }

    }else if(!stricmp(command,"cramer")){
        strtomatriz(2);
        double det=detadj(matriz1,m1_n,m1_m);
        double tempdet[mtzSize];
        for (int t=0;t<m1_m;t++){
            for(int i=0;i<m1_n;i++)
                for(int j=0;j<m1_m;j++)
                    if(j!=t)
                        matrizaux[i][j]=matriz1[i][j];
                    else
                        matrizaux[i][j]=matriz2[i][0];
            tempdet[t]=detadj(matrizaux,m1_n,m1_m);
            for(int i=0;i<m1_m;i++){
            cout<<endl;
            for(int j=0;j<m1_n;j++)
                cout<<matrizaux[i][j]<<" ";
            }cout<<"r="<<tempdet[t]<<endl<<endl;
        }
        for (int t=0;t<m1_m;t++)
            cout<<endl<<"X"<<t+1<<"="<<tempdet[t]<<"/"<<det<<" ="<<tempdet[t]/det;
    }
    else{
        cout<<endl<<"comando desconhecido, tente digitar help";
    }
}
void strtomatriz(int nmatriz){
    char aux[strSize];
    int aux1=-1;
    int aux2=-1;
    if(nmatriz>=1){
        aux1=-1;
        aux2=-1;
        m1_n++;
        m1_m++;
        memset(aux,0,strSize);
        for (int i=strlen(command);i<strlen(stringmatriz);i++){
            if(stringmatriz[i]=='&'){lastmtzidx=i+1;i=strlen(stringmatriz);}
            else if(stringmatriz[i]!=' '&&stringmatriz[i]!='|'){
                aux1++;
                aux[aux1]=stringmatriz[i];
            }else if(strcmp(aux,"")){
                if(m1_n==0)m1_m++;
                aux2++;
                aux1=-1;
                matriz1[m1_n][aux2]=atof(aux);
                memset(aux,0,strSize); lastmtzidx=i;
                if(stringmatriz[i]!=' '){
                  m1_n++;
                  aux2=-1;
                }
            }
        }
    }

    if(nmatriz>=2){
        aux1=-1;
        aux2=-1;
        m2_n++;
        m2_m++;
        memset(aux,0,strSize);
        for (int i=lastmtzidx;i<strlen(stringmatriz);i++){
            if(stringmatriz[i]=='&'){lastmtzidx=i+1;i=strlen(stringmatriz);}
            else if(stringmatriz[i]!=' '&&stringmatriz[i]!='|'){
                aux1++;
                aux[aux1]=stringmatriz[i];
            }else if(strcmp(aux,"")){
                if(m2_n==0)m2_m++;
                aux2++;
                aux1=-1;
                matriz2[m2_n][aux2]=atof(aux);
                memset(aux,0,strSize); lastmtzidx=i;
                if(stringmatriz[i]!=' '){
                  m2_n++;
                  aux2=-1;
                }
            }
        }
    }
}
int det11(int l){
    if(l)
        return 0;
    else
        return 1;
}
double cofator(int a,int b,double matrizZ[mtzSize][mtzSize],int mz_n,int mz_m){
    double detadj(double matrizZ[mtzSize][mtzSize],int mz_n,int mz_m);
    double matrizcof [mtzSize][mtzSize];
    int mc_n=-1; //linhas
    int mc_m=-1; //colunas
    mc_n=mz_n-1;
    mc_m=mz_m-1;
    int aux1=-1,aux2;
    for(int i=0;i<mz_n;i++){
        if(a!=i)
            aux1++;
        aux2=-1;
        for(int j=0;j<mz_m;j++){
            if(j!=b){
                aux2++;
                if(i!=a)
                    matrizcof[aux1][aux2]=matrizZ[i][j];
            }
        }
    }
    if(mc_n==1){
        if((a+b)%2==0)
        return (matrizZ[det11(a)][det11(b)]);//matrizcof[0][0];
        else
        return (matrizZ[det11(a)][det11(b)])*-1;//matrizcof[0][0]*-1;
    }else if(mc_n==2){
        if((a+b)%2==0)
        return (matrizcof[0][0]*matrizcof[1][1])-(matrizcof[0][1]*matrizcof[1][0]);
        else
        return (matrizcof[0][0]*matrizcof[1][1])-(matrizcof[0][1]*matrizcof[1][0])*-1;
    }else if(mc_n==3){
        if((a+b)%2==0)
        return (matrizcof[0][0]*matrizcof[1][1]*matrizcof[2][2])+(matrizcof[0][1]*matrizcof[1][2]*matrizcof[2][0])+(matrizcof[0][2]*matrizcof[1][0]*matrizcof[2][1])-(matrizcof[0][1]*matrizcof[1][0]*matrizcof[2][2])+(matrizcof[0][0]*matrizcof[1][2]*matrizcof[2][1])+(matrizcof[0][2]*matrizcof[1][1]*matrizcof[2][0]);
        else
        return (matrizcof[0][0]*matrizcof[1][1]*matrizcof[2][2])+(matrizcof[0][1]*matrizcof[1][2]*matrizcof[2][0])+(matrizcof[0][2]*matrizcof[1][0]*matrizcof[2][1])-(matrizcof[0][1]*matrizcof[1][0]*matrizcof[2][2])+(matrizcof[0][0]*matrizcof[1][2]*matrizcof[2][1])+(matrizcof[0][2]*matrizcof[1][1]*matrizcof[2][0])*-1;
    }else
    if((a+b)%2==0)
        return detadj(matrizcof,mc_n,mc_m);
    else
        return detadj(matrizcof,mc_n,mc_m)*-1;

}
int getAuxZ(int isL,int idx,int n, int m){
    switch(idx){
        default:
        if(isL)
            return n;
        else
            return m;
        break;

    }
}

double detadj(double matrizZ[mtzSize][mtzSize],int mz_n,int mz_m){
    int zerosl=0,l=0;
    int zerosc=0,c=0;
    int currentz=0;
    int z,isL;
    for(int i=0;i<mz_n;i++){
            currentz=0;
        for(int j=0;j<mz_m;j++){
            if(matrizZ[i][j]==0)
                currentz++;
        }
        if(currentz>zerosl){
            l=i;
            zerosl=currentz;
        }
    }
    for(int i=0;i<mz_n;i++){
            currentz=0;
        for(int j=0;j<mz_m;j++){
            if(matrizZ[j][i]==0)
                currentz++;
        }
        if(currentz>zerosc){
            c=i;
            zerosc=currentz;
        }
    }
    if(zerosc>zerosl){
        z=c;
        isL=0;
        cout<<endl<<"expansao pela coluna: "<<z<<endl;
    }else{
        z=l;
        isL=1;
        cout<<endl<<"expansao pela linha: "<<z<<endl;
    }
    double output=0;
    double temp;
    for(int i=0;i<getAuxZ(isL,0,mz_n,mz_m);i++)
        if(isL)
            if(matrizZ[z][i]!=0){
                temp=cofator(z,i,matrizZ,mz_n,mz_m);
                output+=matriz1[z][i]*temp; cout<<matriz1[z][i]<<"*"<<temp<<"+";
            }
        else
            if(matrizaux[i][z]!=0){
                temp=cofator(i,z,matrizZ,mz_n,mz_m);
                output+=matrizZ[i][z]*temp; cout<<matriz1[i][z]<<"*"<<temp<<"+";
            }

    return output;
}

bool isErl(){
    int last_j=-1;
    int currentj=0;
    int erl=0;
    int zeros,noterl=0,zeroline=0;
    for(int i=0;i<m1_n;i++){
        zeros=0;
        for(int j=0;j<m1_m;j++)
            if(matriz1[i][j]!=0){
                    currentj=j;
                if(matriz1[i][j]!=1){
                    erl=0;j=m1_m;i=m1_n; noterl=1;
                }else{
                    if(zeroline){
                       erl=0;j=m1_m;i=m1_n;noterl=1;
                    }
                    for (int k=0;k<m1_n;k++)
                        if(matriz1[k][j]!=0&&k!=i){
                            erl=0;j=m1_m;i=m1_n;k=m1_n;noterl=1;
                        }
                    if(last_j>currentj){
                        erl=0;j=m1_m;i=m1_n; noterl=1;
                    }else if(!noterl){
                        erl=1;j=m1_m;
                        last_j=currentj;
                    }
                }
            }else{
                zeros++;
                if(zeros>=m1_m)
                    zeroline=1;
            }
    }
    return erl;
}

void toErl(){
        int currentline=0;
        int currentcol=0;
        int current0,aux2=0,aux3=0;
        double aux1;
        while(!isErl()){
            current0=0;
            aux2=0;
            for(int k=0;k<m1_m;k++)
                if(matriz1[currentline][k]!=0){
                    current0++;
                    if(matriz1[currentline][k]!=1&&aux2==0){
                        aux1=matriz1[currentline][k];
                        currentcol=k;
                        cout<<"L"<<currentline+1<<"/"<<aux1<<endl;
                        for(int j=0;j<m1_m*2;j++)
                            matriz1[currentline][j]/=aux1;
                    }else if(aux2==0){
                        aux2++;
                        currentcol=k;
                    }
                }
            if(current0==0){
                for (int i=currentline;i<m1_n-1;i++)
                    for(int j=0;j<m1_m*2;j++)
                        matriz1[i][j]=matriz1[i+1][j];
                for(int j=0;j<m1_m*2;j++)
                        matriz1[m1_n-1][j]=0;
            }else{
                for(int k=0;k<m1_n;k++)
                    if(matriz1[k][currentcol]!=0&&k!=currentline){
                        aux1=matriz1[k][currentcol];
                        if(aux1>0)
                            aux1*=-1;
                        cout<<"L"<<k+1<<"+("<<aux1<<"L"<<currentline+1<<")"<<endl;
                        for(int i=0;i<m1_m*2;i++)
                            matriz1[k][i]+=matriz1[currentline][i]*aux1;
                    }
            }
            currentline++;
            if(currentline>=m1_n){currentline=0; aux3++;}
            if(aux3>100){cout<<"float error"<<endl<<endl;break;}
        }
}

void toInvnn(){
    if(m1_m==m1_n&&m1_n<=mtzSize/2){
        for(int i=0;i<m1_n;i++)
            for(int j=0;j<m1_m;j++)
                if(i==j)
                    matrizaux[i][j]=1;
                else
                    matrizaux[i][j]=0;
        for(int i=0;i<m1_n;i++)
            for(int j=m1_m;j<m1_m*2;j++)
                matriz1[i][j]=matrizaux[i][j-m1_m];
        //m1_m*=2;
        toErl();
    }else cout<<"A matriz é muito grande ou não é nxn"<<endl;
}

void mult(){
    if(m2_n==m1_m){
        for(int i=0;i<m1_n;i++)
            for(int j=0;j<m1_m;j++)
                matrizaux[i][j]=matriz1[i][j];
        for(int i=0;i<m1_n;i++)
            for(int j=0;j<m1_m;j++)
                matriz1[i][j]=0;

        for(int i=0;i<m2_n;i++){cout<<endl;
            for(int j=0;j<m1_m;j++){
                for(int k=0;k<m1_m;k++){
                    cout<<"("<<matrizaux[j][k]<<"*"<<matriz2[k][i]<<")";
                    if(k!=m1_m-1)cout<<"+";
                    matriz1[i][j]+=matrizaux[j][k]*matriz2[k][i];
                }cout<<" ";
            }
        }
    }else cout<<endl<<"o n de colunas da primeira deve ser igual ao n de linhas da segunda "<<m1_m<<m2_n<<endl;
}
/*
OFFSET
___________________________________

bool isErl(){
    int last_j=-1;
    int currentj=0;
    int erl=0;
    int zeros,noterl=0,zeroline=0;
cout<<"1";
    for(int i=0;i<m1_n;i++){
        zeros=0;
        for(int j=0;j<m1_m;j++)
            if(matriz1[i][j]<0-offset&&matriz1[i][j]>0+offset){
                    currentj=j;
                if(matriz1[i][j]<1-offset&&matriz1[i][j]>1+offset){
                    erl=0;j=m1_m;i=m1_n; noterl=1;
                }else{
                    if(zeroline){
                       erl=0;j=m1_m;i=m1_n;noterl=1;
                    }
                    for (int k=0;k<m1_n;k++)
                        if(matriz1[k][j]<0-offset&&matriz1[k][j]>0+offset&&k!=i){
                            erl=0;j=m1_m;i=m1_n;k=m1_n;noterl=1;
                        }
                    if(last_j>currentj){
                        erl=0;j=m1_m;i=m1_n; noterl=1;
                    }else if(!noterl){
                        erl=1;j=m1_m;
                        last_j=currentj;
                    }
                }
            }else{
                zeros++;
                if(zeros>=m1_m)
                    zeroline=1;
            }
    }
    return erl;
}

void toErl(){
        int currentline=0;
        int currentcol=0;
        int current0,aux2=0,aux3=0;
        double aux1;
        while(!isErl()){
            current0=0;
            aux2=0;
            for(int k=0;k<m1_m;k++)
                if(matriz1[currentline][k]<0-offset&&matriz1[currentline][k]>0+offset){
                    current0++;
                    if(matriz1[currentline][k]<1-offset&&matriz1[currentline][k]>1+offset&&aux2==0){
                        aux1=matriz1[currentline][k];
                        currentcol=k;
                        cout<<"L"<<currentline+1<<"/"<<aux1<<endl;
                        for(int j=0;j<m1_m;j++)
                            matriz1[currentline][j]/=aux1;
                    }else if(aux2==0){
                        aux2++;
                        currentcol=k;
                    }
                }
            if(current0==0){
                for (int i=currentline;i<m1_n-1;i++)
                    for(int j=0;j<m1_m;j++)
                        matriz1[i][j]=matriz1[i+1][j];
                for(int j=0;j<m1_m;j++)
                        matriz1[m1_n-1][j]=0;
            }else{
                for(int k=0;k<m1_n;k++)
                    if(matriz1[k][currentcol]<0-offset&&matriz1[k][currentcol]>0+offset&&k!=currentline){
                        aux1=matriz1[k][currentcol];
                        if(aux1>0)
                            aux1*=-1;
                        cout<<"L"<<k+1<<"+("<<aux1<<"L"<<currentline+1<<")"<<endl;
                        for(int i=0;i<m1_m;i++)
                            matriz1[k][i]+=matriz1[currentline][i]*aux1;
                    }
            }
            currentline++;
            if(currentline>=m1_n){currentline=0; aux3++;}
            if(aux3>100){cout<<"float error"<<endl<<endl;break;}
        }
}
____________________________________
for(int i=0;i<mtzSize;i++)
            for(int j=0;j<mtzSize;j++)
                matrizbug[i][j]=-1;


float isDiv(float arg0, float arg1, int line, int col){
    float mid=arg0/arg1;
    if(arg0==mid*arg1&&matrizbug[line][col]!=-1)
        return mid;
    else{
        for(int i=0;i<=20;i++)
                if(arg0%i==0&&arg1%i==0){arg0/=i;arg1/=i;}
        if(matrizbug[line][col]!=-1){
            mid=arg0/matrizbug[line][col];
            if(arg0==mid*matrizbug[line][col]){
                matrizbug[line][col]=-1;
                arg0=mid;
                mid=arg0/arg1;
                if(arg0==mid*arg1)
                    return mid;
                else{
                    matrizbug[line][col]=arg1;
                    return arg0;
                }
            }
        }else{
            matrizbug[line][col]=arg1;
            return arg0;
        }
    }
}
*/
